#lang racket

(require (only-in 2htdp/image color))
(require (only-in "graphDraw.rkt" draw-graph))
(require (only-in "defs.rkt" graph vertex edge))
(require (only-in "graphGen.rkt" random-color))

(define test1 (graph false false 
                     (list (vertex 'a (random-color))
                           (vertex 'b (random-color))
                           (vertex 'c (random-color))) 
                     (list (edge 'a 'b 0)
                           (edge 'c 'c 0)
                           (edge 'a 'c 0))))



(define test2 (graph false true 
                     (list (vertex 'a (color 150 150 150))
                           (vertex 'b 'black)
                           (vertex 'c 'black)) 
                     (list (edge 'a 'b 0)
                           (edge 'a 'c 0)
                           (edge 'b 'c 0))))


(define test3 (graph true false 
                     (list (vertex 'A (random-color))
                           (vertex 'B (random-color))
                           (vertex 'C (random-color))
                           (vertex 'D (random-color))
                           (vertex 'E (random-color))
                           (vertex 'F (random-color))
                           (vertex 'G (random-color))
                           (vertex 'H (random-color))
                           (vertex 'I (random-color))
                           (vertex 'J (random-color))
                           (vertex 'K (random-color))
                           (vertex 'L (random-color))
                           (vertex 'M (random-color))
                           (vertex 'N (random-color)))
                     (list (edge 'A 'D 0)
                           (edge 'C 'A 0)
                           (edge 'A 'G 0)
                           (edge 'B 'G 0)
                           (edge 'B 'A 0)
                           (edge 'N 'D 3)
                           (edge 'B 'H 0)
                           (edge 'C 'E 0)
                           (edge 'D 'C 0))))

(define testcurves (graph true true 
                          (list (vertex 'A (random-color))
                                (vertex 'B (random-color))
                                (vertex 'C (random-color))
                                (vertex 'D (random-color))
                                (vertex 'E (random-color))
                                (vertex 'F (random-color))
                                (vertex 'G (random-color))
                                (vertex 'H (random-color))
                                (vertex 'I (random-color))
                                (vertex 'J (random-color))
                                (vertex 'K (random-color))
                                (vertex 'L (random-color))
                                (vertex 'M (random-color))
                                (vertex 'N (random-color)))
                          (list ;(edge 'G 'B 0)
                                (edge 'C 'I 2)
                                (edge 'M 'G 3)
                                (edge 'B 'H 12)
                                (edge 'M 'A 32)
                                (edge 'K 'M 12)
                                (edge 'D 'L 15)
                                (edge 'C 'H 9)
                                ;(edge 'G 'L 8)
                                (edge 'A 'E 4)
                                (edge 'D 'N 5)
                                )))


(draw-graph test1 400)
(draw-graph test2 400)
(draw-graph test3 400)
(draw-graph testcurves 400)
(draw-graph testcurves 200)
(draw-graph testcurves 150)
(draw-graph testcurves 100)
(draw-graph testcurves 600)